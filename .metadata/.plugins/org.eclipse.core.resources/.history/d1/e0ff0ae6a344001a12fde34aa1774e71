package stations;

import java.util.Random;

import conveyors.SynchronizedConveyor;

public class Station implements Runnable {

	private static Random randomGenerator = new Random();
	private int workload; // workload remaining
	public SynchronizedConveyor inConveyor; // current output conveyer
	public SynchronizedConveyor outConveyor; // current input conveyer
	private int stationID;
	public Station(int id, int workload, SynchronizedConveyor in, SynchronizedConveyor out) {
		this.workload = workload;
		this.stationID = id;
		this.inConveyor = in;
		this.outConveyor = out;
	}
	public void setConnection(int conveyor) {
		if (conveyor == 0) {
			this.inConveyor.initializeConnection(this);
		}else {
			this.outConveyor.initializeConnection(this);
		}
	}
	@Override
    public void run() {
		// Set Connections for this station
		for (int i = 0; i < 2; i++) {
			try {
				Thread.sleep(randomGenerator.nextInt(30));
				setConnection(i);
			}
			catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.print("Routing Station " + this.stationID + ": Workload set" + 
				". Station " + this.stationID + " has a total of " + this.workload + " package groups to move.\n");
		
		// Move Packages
		try {
			// For each Conveyor
				// Attempt to get lock
					// If can get lock, attempt to get lock on the other one
						// If it can also get lock on the other one, move package across and release both locks
			
					// If cannot get lock, release lock on other conveyor (if it has a lock on the other one)
				//
			
			// Thread Terminates...
		} catch(Exception e) {
			e.printStackTrace();
		}

	}
	public int getID() {
		return this.stationID;
	}
	public int getWorkload() {
		return this.workload;
	}
	public void setWorkload(int workload) {
		this.workload = workload;
	}
}
