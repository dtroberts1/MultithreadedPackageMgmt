import java.io.File;
import java.util.Scanner;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import stations.Station;
import conveyors.SynchronizedConveyor;



public class MultiThreadedApp {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		 File file = new File("src/resources/config.txt");
		 int nbrRoutingStations;
		 int []allWork;
		 int []conveyorIDs;
		 
		 // Create Instance of Executer Service for the number of stations
		 ExecutorService executerService = Executors.newCachedThreadPool();
		 
		 SynchronizedConveyor [] conveyors;
	 
		 try (Scanner scanner = new Scanner(file)){
			 nbrRoutingStations = Integer.parseInt(scanner.nextLine());
			 allWork = new int[nbrRoutingStations];
			 conveyors = new SynchronizedConveyor[nbrRoutingStations];
			 conveyorIDs = new int[nbrRoutingStations];
			 for (int i = 0 ; i < nbrRoutingStations; i++)
				 conveyors[i] = new SynchronizedConveyor(i);
			 scanner.reset();
			  // for (int i = nbrRoutingStations - 1;i >= 0; i--) {
			 for (int i = 0;i < nbrRoutingStations; i++) {
				   	allWork[i] = Integer.parseInt(scanner.nextLine());
				   	conveyorIDs = getConveyorsPerStation(i, nbrRoutingStations);
					executerService.execute(new Station(i, allWork[i], conveyors[conveyorIDs[0]], conveyors[conveyorIDs[1]]));
			   }
			   
			   scanner.close();
		   } catch (Exception e) {
			   e.printStackTrace();
		   }
	}
	public static int[] getConveyorsPerStation(int stationNbr, int nbrStations) {
		int []returnArray = {stationNbr,((stationNbr - 2 < 0) ? (nbrStations): (stationNbr))};
		
		return returnArray;
	}
}
